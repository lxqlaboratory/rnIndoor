import React, { Component } from 'react'import {    StyleSheet,    View,    Text,    Platform,    Image,    TouchableOpacity,    Animated,    Dimensions,    ListView,    ScrollView,} from 'react-native'import {  Cell,DataTable,Header,HeaderCell,Row,EditableCell,CheckableCell,} from 'react-native-data-table'const {height,width} = Dimensions.get('window');export default class RouteManagement extends Component {    constructor(props){        super(props);        this.state = {            alarmList:[                {"item1": 1, "item2" : 10004, "item3" : 'beacon', "item4":1,"item5": 400, "item6" : 400},                {"item1": 2, "item2" : 2533, "item3" : 'huawei', "item4":2,"item5": 3, "item6" : 6},                {"item1": 3, "item2" : 2554, "item3" : 'zte', "item4":2,"item5": 3, "item6" : 6},                ]        };        this.renderHeader = this.renderHeader.bind(this);        this.renderRow = this.renderRow.bind(this);    }    static navigationOptions = ({ navigation }) => ({        title: `${navigation.state.params.name}`,    });    render(){        var alarmListView=null;        var alarmList = this.state.alarmList;        var ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});        if (alarmList !== undefined && alarmList !== null && alarmList.length > 0)        {            alarmListView = (                <ListView                    automaticallyAdjustContentInsets={false}                    dataSource={ds.cloneWithRows(alarmList)}                    renderRow={this.renderRow.bind(this)}                />            );        }        return(                <View style={{width:width,height:height,justifyContent:'flex-start'}}>                   {this.renderHeader()}                    {alarmListView}                </View>        )    }    renderHeader() {        return (            <Header>                <HeaderCell style={styles.headerCell} key="1" text="Id" width={1} />                <HeaderCell style={styles.headerCell} key="2" text="编号" width={1}/>                <HeaderCell                    style={styles.headerCell}                    key="3"                    text="类型"                    width={1}                    isAscending={false}                />                <HeaderCell                    style={styles.headerCell}                    key="4"                    text="状态"                    width={1}                    isAscending={false}                />                <HeaderCell                    style={styles.headerCell}                    key="5"                    text="X"                    width={1}                    isAscending={false}                />                <HeaderCell                    style={styles.headerCell}                    key="6"                    text="Y"                    width={1}                    isAscending={false}                />            </Header>        );    }    renderRow(item) {        let rowStyle = item.no%2 === 0  ? styles.whiteRow : styles.row;        return (            <Row style={rowStyle}>                <Cell style={styles.cell} width={1}>                    {item.item1}                </Cell>                <Cell style={styles.cell} width={3}>                    {item.item2}                </Cell>                <Cell style={styles.cell} width={3}>                    {item.item3}                </Cell>                <Cell style={styles.cell} width={3}>                    {item.item4}                </Cell>                <Cell style={styles.cell} width={3}>                    {item.item5}                </Cell>                <Cell style={styles.cell} width={3}>                    {item.item6}                </Cell>            </Row>        );    }    onCheckablePress() {}    onColumnSort() {}    componentDidMount(){    }}const styles = StyleSheet.create({    container: {        flex: 1,    },    header: {        backgroundColor: 'white',    },    headerCell: {        height: 40,        borderBottomWidth: 1,        backgroundColor: 'white',        borderColor: 'gray',        justifyContent: 'center',    },    cell: {        justifyContent: 'center',        alignItems: 'center',    },    alignTextLeft: {        marginLeft: 20,        textAlign: 'left',    },    whiteRow: {        height: 35,        backgroundColor: 'white',        borderBottomWidth: 1,        borderColor: 'gray',    },    row: {        height: 35,        borderBottomWidth: 1,        borderColor: 'gray',    },    alignTextCenter: {        textAlign: 'center',        justifyContent: 'center',    },});